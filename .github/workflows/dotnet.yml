name: .NET API Test with MySQL

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:

    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
          MYSQL_DATABASE: sistema
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Install Entity Framework CLI
      run: dotnet tool install --global dotnet-ef

    - name: Add EF CLI to PATH
      shell: bash
      run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

    - name: Wait for MySQL
      run: |
        echo "Waiting for MySQL to be healthy..."
        while [ "$(docker inspect --format='{{.State.Health.Status}}' $(docker ps -q -f ancestor=mysql:8.0))" != "healthy" ]; do
          echo "MySQL is not ready yet. Waiting..."
          sleep 5
        done
        echo "MySQL is healthy!"

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./WebApplication1

    - name: Build
      run: dotnet build --no-restore
      working-directory: ./WebApplication1

    - name: Apply migrations (if using Entity Framework)
      run: dotnet ef database update
      working-directory: ./WebApplication1
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost;Database=sistema;User=root;Password=;"

    - name: Start the API
      run: |
        echo "Starting the API..."
        dotnet run --urls http://0.0.0.0:5000
      working-directory: ./WebApplication1 &
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost;Database=sistema;User=root;Password=;"

    - name: Expose API with ngrok
      run: |
        echo "Exposing the API with ngrok..."
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list >/dev/null
        sudo apt update && sudo apt install ngrok
        ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
        ngrok http 5000 &
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost;Database=sistema;User=root;Password=;"

    - name: Show ngrok public URL
      run: curl --silent http://127.0.0.1:4040/api/tunnels | jq -r .tunnels[0].public_url
